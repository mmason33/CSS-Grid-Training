/* GRID CONTAINER */
/* The element on which display: grid is applied. It's the direct parent of all the grid items. In this example container is the grid container. */
/*
Two values possible for the display property
grid - generates a block-level grid
inline-grid - generates an inline-level grid
*/

.container {
  background: grey;
  display: grid;
  max-width: 75%;
  margin: 0 auto;
}


/* Grid Item */
/* The children (direct descendants) of the grid container. Here the row elements are grid items. */

.row {
  border: 2px solid black;
  text-align: center;
  font-size: 40px;
  color: black;
}

.row:nth-of-type(1) {
  background-color: greenyellow;
}

.row:nth-of-type(2) {
  background-color: yellowgreen;
}

.row:nth-of-type(3) {
  background-color: yellow;
}

.row:nth-of-type(4) {
  background-color: orange;
}

.row:nth-of-type(5) {
  background-color: orangered;
}

.row:nth-of-type(6) {
  background-color: royalblue;
}

/*Grid Template Rows and Columns */

.container {
  /* % Values */
  /* change layout with %'s */
  /* columns 1000 */
  /* end 25% 25% 25% / 50% 50% */

/*   grid-template-columns: 75% 25%;
  grid-template-rows: 100% 100%; */

  /* PX values */
  /* add new row, remove one column */
  /* end 200px 200px / 100px 100px 100px */

  /* grid-template-columns: 200px 200px 200px;
  grid-template-rows: 100px 100px; */

  /* Mixed Values */
  /* change rows using percent */

/*   grid-template-columns: 30% 200px calc(70% - 200px);
  grid-template-rows: 100px 175px; */

  /* Fraction units */
  /* use pixel and %'s */
  /* add more row/colums */
  /* end 1fr 1fr/ 5fr 1fr 2fr */
  /* division of fr */

/*   grid-template-columns: 1fr 5fr 1fr 25%;
  grid-template-rows: 5fr 1fr; */

  /* Grid Template Shorthand*/
  /* rows / columns */
  /* end 1fr / 1fr 1fr 1fr 1fr 1fr 1fr */

/*   grid: 1fr 2fr / 1fr 2fr 1fr; */

}

/* Justify Items */
/* Aligns grid items along the inline (row) axis. This value applies to all grid items inside the container. */

.container {
/*   grid: repeat(4, 100px) / repeat(6, 1fr); */

/*   justify-items: start; */

/*   justify-items: end; */

/*   justify-items: center; */

/*   justify-items: stretch; */

/* Align Items */
/* Aligns grid items along the block (column) axis. This value applies to all grid items inside the container. */
/* Vertical align so to speak */

/*   align-items: start; */

/*   align-items: end; */

/*   align-items: center; */

/*   align-items: stretch; */
}


/* Justify Content */
/*
Sometimes the total size of your grid might be less than the size of its grid container. This could happen if all of your grid items are sized with non-flexible units like px. In this case you can set the alignment of the grid within the grid container. This property aligns the grid along the inline (row) axis.
*/

.container {
/*   grid: repeat(4, 100px) / repeat(6, 200px); */

/*   justify-content: start; */

/*   justify-content: end; */

/*   justify-content: center; */

/*   justify-content: stretch; */

/* places an even amount of space between each grid item, with half-sized spaces on the far ends */
/*   justify-content: space-around; */

/* places an even amount of space between each grid item, including the far ends */
/*   justify-content: space-evenly; */

/* places an even amount of space between each grid item, with no space at the far ends */
/*   justify-content: space-between; */
}


/* GRID ITEMS */

/*
Determines a grid item's location within the grid by referring to specific grid lines. grid-column-start/grid-row-start is the line where the item begins, and grid-column-end/grid-row-end is the line where the item ends.
*/

/* Order => order the grid items, can accept negative numbers and default is 0 */
/* Notice the repeat function => repeat(numberOfTimes, value) */
/* .container {
  grid: repeat(4, 1fr) / repeat(4, 1fr);
} */

 /* order is 0 */
/* .one {
  grid-column-start: 1;
  grid-column-end: 4;
  grid-row-start: 2;
  grid-row-end: 5;
} */

/* largest number ordered last */
/* .two {
  order: 2;
  grid-column-start: 2;
  grid-column-end: 5;
} */

/* comment out and see how the order doesn't change, WHY? */
/* .three {
  order: 1;
} */

/* smallest number places the item in the first position */
/* .four {
  order: -2;
  grid-column-start: 1;
  grid-column-end: 4;
} */

 /* order is 0 */
/* .five {
  grid-row-start: 2;
  grid-row-end: 5;
} */

/* second position */
/* .six {
  order: -1;
  grid-column-start: 4;
  grid-column-end: 5;
} */

/* Grid Column/Row Shorthand */

/* 6 x 6 grid */
/* Repeat function */
/* .container {
  grid: repeat(6, 1fr)  / repeat(6, 1fr);
}

.one {
  grid-column: 1 / 2;
  grid-row: 6;
}

.two {
  grid-column: 1 / 3;
  grid-row: 5;
}

.three {
  grid-column: 1 / 4;
  grid-row: 4;
} */

/* row end 5 */
/* .four {
  grid-column: 1 / 5;
  grid-row: 3;
}

.five {
  grid-column: 1 / 6;
  grid-row: 2;
}

.six {
  grid-column: 1 / 7;
  grid-row: 1;
} */

/* no order property is used notice just row start declaration */

/* Span Keyword */

/* Notice that in this declaration that the grid defaults to one row of 150px because the columns do not need the second row */
/* break the row 150px 150px / 200px 1fr 200px 1fr 200px */
/* .container {
  grid: 150px 1fr / 200px 1fr 200px 1fr 200px 1fr;
} */

/* column start 2 span 2 columns */
/* .one {
  grid-column: 2 / span 2;
} */

/* span 2 columns, span 2 rows */
/* .two {
  grid-column: span 2;
  grid-row: span 2;
} */

/* span 3 columns */
/* .three {
  grid-row: span 3;
} */

/* row start 1 and span 2 */
/* .four {
  grid-row: 1 / span 2;
} */

/* span 2 columns */
/* .five {
  grid-column: span 2;
} */

/* span 5 columns */
/* .six {
  grid-column: span 5;
} */

/* Notice that with these declarations the third row is implicitly created, no declaration was made for a third row. Because the column declarations break the grid, the items automatically break into a new row if the space need is not present. PRETTY COOL! */


/* GRID AREA for shorthand */

/* This property can be used as an even shorter shorthand for grid-row-start + grid-column-start + grid-row-end + grid-column-end */
/* <row-start> / <column-start> / <row-end> / <column-end> */

/* notice gap when using percentages */
/* 33% 33% 33% / 1fr 1fr 1fr */
/* percentage values on rows only take affect when the parent container has a specified height */
/* .container {
  grid: repeat(3, 33%) / repeat(4, 1fr);
  height: 250px;
}

.one {
  grid-area: 2 / 2 / 3 / span 3;
}

.two {
  grid-area: 3 / 1 / 3 / 3;
}

.three {
  grid-area: 2 / 1 / 2 / span 1;
}

.four {
  grid-area: 1 / span 3
}

.six {
  grid-area: 3 / span 2;
} */


/* Justify Self */
/* Aligns a grid item inside a cell along the inline (row) axis. This value applies to a grid item inside a single cell. */

/* .container {
  grid: repeat(4, 1fr) / repeat(4, 1fr);
} */

/* .one {
  justify-self: end;
}

.two {
  justify-self: start;
}

.three {
  justify-self: center;
}

.four {
  justify-self: stretch;
} */


/* Align Self */
/* Aligns a grid item inside a cell along the block (column) axis. This value applies to the content inside a single grid item. */
/* Vertical Align => default: stretch */

/* .container {
  grid: repeat(3, 100px) / repeat(4, 1fr);
} */

/* .one {
  align-self: start;
}

.two {
  align-self: end;
}

.three {
  align-self: center;
}

.four {
  align-self: stretch;
} */


/* Place Self */
/* Place-self sets both the align-self and justify-self properties in a single declaration. */

/* .one {
  place-self: center;
}

.two {
  place-self: start;
}

.three {
  place-self: end;
}

.four {
  place-self: end;
}

.five {
  place-self: center;
}

.six {
  place-self: stretch;
} */



